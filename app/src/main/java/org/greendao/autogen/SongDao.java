package org.greendao.autogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tgithubc.kumao.bean.Song;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG".
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property SongId = new Property(1, String.class, "songId", false, "SONG_ID");
        public final static Property SongName = new Property(2, String.class, "songName", false, "SONG_NAME");
        public final static Property AuthorName = new Property(3, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property ArtistId = new Property(4, String.class, "artistId", false, "ARTIST_ID");
        public final static Property AlbumId = new Property(5, String.class, "albumId", false, "ALBUM_ID");
        public final static Property AlbumName = new Property(6, String.class, "albumName", false, "ALBUM_NAME");
        public final static Property SmallPic = new Property(7, String.class, "smallPic", false, "SMALL_PIC");
        public final static Property BigPic = new Property(8, String.class, "bigPic", false, "BIG_PIC");
        public final static Property BigMorePic = new Property(9, String.class, "bigMorePic", false, "BIG_MORE_PIC");
        public final static Property Lrclink = new Property(10, String.class, "lrclink", false, "LRCLINK");
        public final static Property Filelink = new Property(11, String.class, "filelink", false, "FILELINK");
        public final static Property IsNew = new Property(12, String.class, "isNew", false, "IS_NEW");
        public final static Property Hot = new Property(13, String.class, "hot", false, "HOT");
        public final static Property RateArrary = new Property(14, String.class, "rateArrary", false, "RATE_ARRARY");
        public final static Property Rate = new Property(15, String.class, "rate", false, "RATE");
        public final static Property Duration = new Property(16, int.class, "duration", false, "DURATION");
        public final static Property FreeBitrate = new Property(17, String.class, "freeBitrate", false, "FREE_BITRATE");
        public final static Property Biaoshi = new Property(18, String.class, "biaoshi", false, "BIAOSHI");
        public final static Property Info = new Property(19, String.class, "info", false, "INFO");
        public final static Property Company = new Property(20, String.class, "company", false, "COMPANY");
        public final static Property Content = new Property(21, String.class, "content", false, "CONTENT");
        public final static Property FileSize = new Property(22, long.class, "fileSize", false, "FILE_SIZE");
    }


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"SONG_ID\" TEXT," + // 1: songId
                "\"SONG_NAME\" TEXT," + // 2: songName
                "\"AUTHOR_NAME\" TEXT," + // 3: authorName
                "\"ARTIST_ID\" TEXT," + // 4: artistId
                "\"ALBUM_ID\" TEXT," + // 5: albumId
                "\"ALBUM_NAME\" TEXT," + // 6: albumName
                "\"SMALL_PIC\" TEXT," + // 7: smallPic
                "\"BIG_PIC\" TEXT," + // 8: bigPic
                "\"BIG_MORE_PIC\" TEXT," + // 9: bigMorePic
                "\"LRCLINK\" TEXT," + // 10: lrclink
                "\"FILELINK\" TEXT," + // 11: filelink
                "\"IS_NEW\" TEXT," + // 12: isNew
                "\"HOT\" TEXT," + // 13: hot
                "\"RATE_ARRARY\" TEXT," + // 14: rateArrary
                "\"RATE\" TEXT," + // 15: rate
                "\"DURATION\" INTEGER NOT NULL ," + // 16: duration
                "\"FREE_BITRATE\" TEXT," + // 17: freeBitrate
                "\"BIAOSHI\" TEXT," + // 18: biaoshi
                "\"INFO\" TEXT," + // 19: info
                "\"COMPANY\" TEXT," + // 20: company
                "\"CONTENT\" TEXT," + // 21: content
                "\"FILE_SIZE\" INTEGER NOT NULL );"); // 22: fileSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(2, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(3, songName);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(4, authorName);
        }
 
        String artistId = entity.getArtistId();
        if (artistId != null) {
            stmt.bindString(5, artistId);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(6, albumId);
        }
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(7, albumName);
        }
 
        String smallPic = entity.getSmallPic();
        if (smallPic != null) {
            stmt.bindString(8, smallPic);
        }
 
        String bigPic = entity.getBigPic();
        if (bigPic != null) {
            stmt.bindString(9, bigPic);
        }
 
        String bigMorePic = entity.getBigMorePic();
        if (bigMorePic != null) {
            stmt.bindString(10, bigMorePic);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(11, lrclink);
        }
 
        String filelink = entity.getFilelink();
        if (filelink != null) {
            stmt.bindString(12, filelink);
        }
 
        String isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindString(13, isNew);
        }
 
        String hot = entity.getHot();
        if (hot != null) {
            stmt.bindString(14, hot);
        }
 
        String rateArrary = entity.getRateArrary();
        if (rateArrary != null) {
            stmt.bindString(15, rateArrary);
        }
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(16, rate);
        }
        stmt.bindLong(17, entity.getDuration());
 
        String freeBitrate = entity.getFreeBitrate();
        if (freeBitrate != null) {
            stmt.bindString(18, freeBitrate);
        }
 
        String biaoshi = entity.getBiaoshi();
        if (biaoshi != null) {
            stmt.bindString(19, biaoshi);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(20, info);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(21, company);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(22, content);
        }
        stmt.bindLong(23, entity.getFileSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(2, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(3, songName);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(4, authorName);
        }
 
        String artistId = entity.getArtistId();
        if (artistId != null) {
            stmt.bindString(5, artistId);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(6, albumId);
        }
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(7, albumName);
        }
 
        String smallPic = entity.getSmallPic();
        if (smallPic != null) {
            stmt.bindString(8, smallPic);
        }
 
        String bigPic = entity.getBigPic();
        if (bigPic != null) {
            stmt.bindString(9, bigPic);
        }
 
        String bigMorePic = entity.getBigMorePic();
        if (bigMorePic != null) {
            stmt.bindString(10, bigMorePic);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(11, lrclink);
        }
 
        String filelink = entity.getFilelink();
        if (filelink != null) {
            stmt.bindString(12, filelink);
        }
 
        String isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindString(13, isNew);
        }
 
        String hot = entity.getHot();
        if (hot != null) {
            stmt.bindString(14, hot);
        }
 
        String rateArrary = entity.getRateArrary();
        if (rateArrary != null) {
            stmt.bindString(15, rateArrary);
        }
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(16, rate);
        }
        stmt.bindLong(17, entity.getDuration());
 
        String freeBitrate = entity.getFreeBitrate();
        if (freeBitrate != null) {
            stmt.bindString(18, freeBitrate);
        }
 
        String biaoshi = entity.getBiaoshi();
        if (biaoshi != null) {
            stmt.bindString(19, biaoshi);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(20, info);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(21, company);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(22, content);
        }
        stmt.bindLong(23, entity.getFileSize());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // songId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // songName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // authorName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // artistId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // albumId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // albumName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // smallPic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bigPic
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bigMorePic
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lrclink
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // filelink
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // isNew
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // hot
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // rateArrary
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // rate
            cursor.getInt(offset + 16), // duration
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // freeBitrate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // biaoshi
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // info
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // company
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // content
            cursor.getLong(offset + 22) // fileSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSongName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthorName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArtistId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlbumId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbumName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSmallPic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBigPic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBigMorePic(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLrclink(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFilelink(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsNew(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHot(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRateArrary(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDuration(cursor.getInt(offset + 16));
        entity.setFreeBitrate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBiaoshi(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInfo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCompany(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setContent(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFileSize(cursor.getLong(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Song entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
